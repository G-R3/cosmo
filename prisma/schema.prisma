// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

enum Role {
  USER
  ADMIN
}

model Community {
  id          String            @id @default(cuid())
  name        String            @unique @default("")
  title       String            @default("")
  description String?
  creator     User              @relation(fields: [creatorId], references: [id])
  creatorId   String
  posts       Post[]
  moderators  Moderator[]
  tags        Tags[]
  members     communityMember[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model communityMember {
  id          String    @unique @default(cuid())
  community   Community @relation(fields: [communityId], references: [id])
  communityId String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@id([communityId, userId], name: "communityMemberId")
}

model Tags {
  id          String    @id @default(cuid())
  name        String
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId String
}

model Moderator {
  id          String    @unique @default(cuid())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  community   Community @relation(fields: [communityId], references: [id])
  communityId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  assignedBy  String

  @@id([userId, communityId], name: "moderatorId")
}

model Post {
  id          String    @id @default(cuid())
  title       String
  content     String?   @db.Text()
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  slug        String
  totalVotes  Int       @default(0)
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  comments    Comment[]
  likes       Like[]
  community   Community @relation(fields: [communityId], references: [id])
  communityId String
  savedBy     Save[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
}

model Like {
  id     String @unique @default(cuid())
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@id([postId, userId], name: "likeId")
}

model Save {
  id     String @unique @default(cuid())
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@id([postId, userId], name: "saveId")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String            @id @default(cuid())
  name                  String?
  email                 String?           @unique
  emailVerified         DateTime?
  image                 String?
  role                  Role              @default(USER)
  accounts              Account[]
  sessions              Session[]
  posts                 Post[]
  comments              Comment[]
  likes                 Like[]
  communitiesCreated    Community[]
  savedPosts            Save[]
  communitiesModerating Moderator[]
  followedCommunities   communityMember[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
