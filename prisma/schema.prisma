// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]

}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"

}

model Community {
  id          Int     @id @default(autoincrement())
  name        String  @unique @default("")
  description String?
  posts       Post[]
}

model Post {
  id            Int       @id @default(autoincrement())
  title         String
  content       String?   @db.Text()
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
  slug          String
  totalVotes    Int       @default(0)
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  comments      Comment[]
  likes         Like[]
  community     Community @relation(fields: [communityName], references: [name])
  communityName String
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text()
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Like {
  id     Int    @unique @default(autoincrement())
  post   Post   @relation(fields: [postId], references: [id])
  postId Int
  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@id([postId, userId], name: "likeId")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments      Comment[]
  likes         Like[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
